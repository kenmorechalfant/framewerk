body {
  margin: 0;
  padding: 0;
  position: relative;
  width: 100%;
  overflow-x: hidden;
}

*,
*:before,
*:after {
  box-sizing: border-box;
}

/*
  .container
  a centered column to contain all site content

  it is full-width on mobile and a fixed width at various device sizes
*/

.container {
  margin-left: auto;
  margin-right: auto;
  padding-left: 15px;
  padding-right: 15px;

  @media @mobile {
    max-width: 500px;
  }

  @media @tablet {
    width: 748px;
    padding-left: 15px;
    padding-right: 15px;
  }

  @media @laptop {
    width: 1004px;
    padding-left: 15px;
    padding-right: 15px;
  }

  @media @desktop {
    width: 1268px;
    padding-left: 15px;
    padding-right: 15px;
  }

  &:extend(.clearfix all);
}

/*
  .row
  the only purpose of a .row is to contain multiple .col elements

  it has a clearfix and negative margins to offset the outer horizontal margins
  on columns so that they align with the edges of the container
*/

.row {
  margin-left: -15px;
  margin-right: -15px;
  padding: 0;

  &:extend(.clearfix all);
}

/*
  .col
  Column

  by default a .col takes up full width
  you can change the width of the column by pairing it with a class in the form
  .<media query name>-<span>
  where the media query name is phone|tablet|laptop|desktop
  and the span is a value 1-12

  e.g: .tablet-6, .desktop-12

  when the appropriate media query is matched the .col will have a width of
  <span> divided by 12.
*/

.make-columns(@prefix) {
  .generate-columns(12);

  .generate-columns(@n, @i: 1) when (@i <= @n) {
    .col.@{prefix}-@{i} { width: @i / @n * 100%; }
    .generate-columns(@n, (@i + 1));
  }
}

.col {
  padding-left: 15px;
  padding-right: 15px;

  display: block;
  width: 100%;
  float: left;

  &.no-padding {
    padding-left: 0;
    padding-right: 0;
  }
}

.make-columns(~'col');

@media @tablet {
  .make-columns(~'tablet');
}

@media @laptop {
  .make-columns(~'laptop');
}

@media @desktop {
  .make-columns(~'desktop');
}

/*
  .grid
  Grid

  a .grid contains .grid-items which will all be the same width
  you define the number of items per row on the .grid itself

  e.g.:
  .grid.tablet-3  <-- 3 items per row on tablets
  .grid.grid-4    <-- 4 items per row at all sizes
*/

.grid {
  &:extend(.row);

  .flexbox();
  flex-wrap: wrap;

  .grid-item {
    padding-left: 15px;
    padding-right: 15px;
  }

  .make-responsive-grid();
}

.grid-item {
  display: block;
  width: 100%;
  float: left;
}

.make-grid-items(@grid-item: ~'.grid-item', @prefix: ~'') {

  .generate-grid-items(6);

  .generate-grid-items(@n, @i: 1) when (@i <= @n) {
    &.@{prefix}-@{i} @{grid-item} { width: 1 / @i * 100%; }
    .generate-grid-items(@n, (@i + 1));
  }
}

.make-responsive-grid(@grid-item: ~'.grid-item') {
  .make-grid-items(@grid-item, ~'grid');

  @media @tablet {
    .make-grid-items(@grid-item, ~'tablet');
  }

  @media @laptop {
    .make-grid-items(@grid-item, ~'laptop');
  }

  @media @desktop {
    .make-grid-items(@grid-item, ~'desktop');
  }
}

// end GRIDS //

.img-responsive {
  height: auto;
  width: 100%;
}

.center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;

  float: none;
}

@media @mobile {
  .hidden-mobile {
    display: none;
  }
}

.visible-mobile-block {
  @media @mobile {
    display: block;
  }

  @media @tablet, @laptop, @desktop {
    display: none;
  }
}

.visible-mobile-inline-block {
  @media @mobile {
    display: inline-block;
  }

  @media @tablet, @laptop, @desktop {
    display: none !important;
  }
}
